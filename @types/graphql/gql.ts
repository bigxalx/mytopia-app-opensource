/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query Einbuergerungstest {\n    einbuergerungstestCollection(limit: 1) {\n      items {\n        sys {\n          id\n        }\n        title\n        heroImage {\n          url\n        }\n        text\n        ergebnisText {\n          json\n        }\n        fragenCollection(limit: 100) {\n          items {\n            sys {\n              id\n            }\n            frageTitel\n            frageText\n            antwortenCollection(limit: 3) {\n              items {\n                sys {\n                  id\n                }\n                antwortText\n                scoreCollection(limit: 10) {\n                  items {\n                    kriterium {\n                      wert\n                      sys {\n                        id\n                      }\n                    }\n                    wertung\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.EinbuergerungstestDocument,
    "\nquery Auswertungskriterien {\n  einbuergerungstestKriteriumCollection(limit: 20) {\n    items {\n      kriterium\n      sys {\n        id\n      }\n      werteCollection(limit: 30) {\n        items {\n          sys {\n            id\n          }\n          wert\n          bild {\n            url\n          }\n          beschreibung\n        }\n      }\n    }\n  }\n}\n": types.AuswertungskriterienDocument,
    "\nquery News {\n  newsCollection(limit: 100) {\n    items {\n      sys {\n        id\n      }\n      title\n      thumbnail {\n        title\n        url\n      }\n      releaseDate\n      recipient\n      location {\n        lat\n        lon\n      }\n    }\n  }\n}\n": types.NewsDocument,
    "\nquery NewsContent($ids: [String!]) {\n  newsCollection(where: {sys: {id_in: $ids}}, limit: 4) {\n    items {\n      sys {\n        id\n      }\n      content {\n        json\n        links {\n          entries {\n            block {\n              __typename\n              ... on VideoEmbed {\n                title\n                videoUrl\n                thumbnail {\n                  title\n                  url\n                }\n              }\n              sys {\n                id\n              }\n            }\n          }\n          assets {\n            block {\n              sys {\n                id\n              }\n              title\n              url\n              width \n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}\n": types.NewsContentDocument,
    "\nquery Aufgaben {\n  aufgabeCollection(limit: 100) {\n    items {\n      sys {\n        id\n      }\n      fraktion\n      title\n      empfaenger\n      releaseDate\n      ablaufdatum\n      punkte\n      thumbnail {\n        title\n        url\n      }\n      task {\n        __typename\n        ... on QuizTask {\n          fragenCollection(limit: 10) {\n            items {\n              frageTitle\n              frageText\n              sys {\n                id\n              }\n              antwortenCollection(limit: 5) {\n                items {\n                  title\n                  richtigeAntwort\n                  sys {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n        ... on GpsTask {\n          ortsbezeichnung\n          location {\n            lat\n            lon\n          }\n          ersatzAufgabe {\n            sys {\n              id\n            }\n            fraktion\n            title\n            empfaenger\n            releaseDate\n            ablaufdatum\n            punkte\n            thumbnail {\n              title\n              url\n            }\n            task {\n              __typename\n              ... on QuizTask {\n                fragenCollection(limit: 10) {\n                  items {\n                    frageTitle\n                    frageText\n                    sys {\n                      id\n                    }\n                    antwortenCollection(limit: 5) {\n                      items {\n                        title\n                        richtigeAntwort\n                        sys {\n                          id\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n              ... on GpsTask {\n                ortsbezeichnung\n                location {\n                  lat\n                  lon\n                }\n              }\n              ... on StepcounterTask {\n                schritte\n                ersatzAufgabe {\n                  __typename\n                  ... on Entry {\n                    sys {\n                      id\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        ... on StepcounterTask {\n          schritte\n          ersatzAufgabe {\n            sys {\n              id\n            }\n            fraktion\n            title\n            empfaenger\n            releaseDate\n            ablaufdatum\n            punkte\n            thumbnail {\n              title\n              url\n            }\n            task {\n              __typename\n              ... on QuizTask {\n                fragenCollection(limit: 10) {\n                  items {\n                    frageTitle\n                    frageText\n                    sys {\n                      id\n                    }\n                    antwortenCollection(limit: 5) {\n                      items {\n                        title\n                        richtigeAntwort\n                        sys {\n                          id\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n              ... on GpsTask {\n                ortsbezeichnung\n                location {\n                  lat\n                  lon\n                }\n              }\n              ... on StepcounterTask {\n                schritte\n                ersatzAufgabe {\n                  __typename\n                  ... on Entry {\n                    sys {\n                      id\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}": types.AufgabenDocument,
    "\nquery AufgabenContent($ids: [String!]) {\n  aufgabeCollection(where: {sys: {id_in: $ids}}, limit:4) {\n    items {\n      sys {\n        id\n      }\n      content {\n        json\n        links {\n          entries {\n            block {\n              __typename\n              ... on VideoEmbed {\n                title\n                videoUrl\n                thumbnail {\n                  title\n                  url\n                }\n              }\n              sys {\n                id\n              }\n            }\n          }\n          assets {\n            block {\n              sys {\n                id\n              }\n              title\n              url\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}": types.AufgabenContentDocument,
    "\nquery Global {\n  globalCollection(limit: 1) {\n    items {\n      mytopiaLogo {\n        title\n        url\n      }\n      hyaenenLogo {\n        title\n        url\n      }\n      zirkelLogo {\n        title\n        url\n      }\n      vertrauteLogo {\n        title\n        url\n      }\n      hyaenenSchwelle\n      zirkelSchwelle\n      vertrauteSchwelle\n      einbuergerungMytopiaText\n      einbuergerungMytopiaImage {\n        title\n        url\n      }\n      wechselZuHyaenenText\n      wechselZuHyaenenImage {\n        title\n        url\n      }\n      wechselZuZirkelText\n      wechselZuZirkelImage {\n        title\n        url\n      }\n      wechselZuVertrauteText\n      wechselZuVertrauteImage {\n        title\n        url\n      }\n      mytopiaInfosCollection(limit: 3) {\n        items {\n          title\n          sys {\n            id\n          }\n        }\n      }\n      hyaenenInfosCollection(limit: 3) {\n        items {\n          title\n          sys {\n            id\n          }\n        }\n      }\n      zirkelInfosCollection(limit: 3) {\n        items {\n          title\n          sys {\n            id\n          }\n        }\n      }\n      vertrauteInfosCollection(limit: 3) {\n        items {\n          title\n          sys {\n            id\n          }\n        }\n      }\n    }\n  }\n}": types.GlobalDocument,
    "\nquery GetInfo($id: String!) {\n  info(id: $id) {\n    sys {\n      id\n    }\n    title\n    content {\n      json\n      links {\n        entries {\n          block {\n            __typename\n            ... on VideoEmbed {\n              title\n              videoUrl\n              thumbnail {\n                title\n                url\n              }\n            }\n            sys {\n              id\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            title\n            url\n            width\n            height\n          }\n        }\n      }\n    }\n  }\n}\n": types.GetInfoDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Einbuergerungstest {\n    einbuergerungstestCollection(limit: 1) {\n      items {\n        sys {\n          id\n        }\n        title\n        heroImage {\n          url\n        }\n        text\n        ergebnisText {\n          json\n        }\n        fragenCollection(limit: 100) {\n          items {\n            sys {\n              id\n            }\n            frageTitel\n            frageText\n            antwortenCollection(limit: 3) {\n              items {\n                sys {\n                  id\n                }\n                antwortText\n                scoreCollection(limit: 10) {\n                  items {\n                    kriterium {\n                      wert\n                      sys {\n                        id\n                      }\n                    }\n                    wertung\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Einbuergerungstest {\n    einbuergerungstestCollection(limit: 1) {\n      items {\n        sys {\n          id\n        }\n        title\n        heroImage {\n          url\n        }\n        text\n        ergebnisText {\n          json\n        }\n        fragenCollection(limit: 100) {\n          items {\n            sys {\n              id\n            }\n            frageTitel\n            frageText\n            antwortenCollection(limit: 3) {\n              items {\n                sys {\n                  id\n                }\n                antwortText\n                scoreCollection(limit: 10) {\n                  items {\n                    kriterium {\n                      wert\n                      sys {\n                        id\n                      }\n                    }\n                    wertung\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery Auswertungskriterien {\n  einbuergerungstestKriteriumCollection(limit: 20) {\n    items {\n      kriterium\n      sys {\n        id\n      }\n      werteCollection(limit: 30) {\n        items {\n          sys {\n            id\n          }\n          wert\n          bild {\n            url\n          }\n          beschreibung\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery Auswertungskriterien {\n  einbuergerungstestKriteriumCollection(limit: 20) {\n    items {\n      kriterium\n      sys {\n        id\n      }\n      werteCollection(limit: 30) {\n        items {\n          sys {\n            id\n          }\n          wert\n          bild {\n            url\n          }\n          beschreibung\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery News {\n  newsCollection(limit: 100) {\n    items {\n      sys {\n        id\n      }\n      title\n      thumbnail {\n        title\n        url\n      }\n      releaseDate\n      recipient\n      location {\n        lat\n        lon\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery News {\n  newsCollection(limit: 100) {\n    items {\n      sys {\n        id\n      }\n      title\n      thumbnail {\n        title\n        url\n      }\n      releaseDate\n      recipient\n      location {\n        lat\n        lon\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery NewsContent($ids: [String!]) {\n  newsCollection(where: {sys: {id_in: $ids}}, limit: 4) {\n    items {\n      sys {\n        id\n      }\n      content {\n        json\n        links {\n          entries {\n            block {\n              __typename\n              ... on VideoEmbed {\n                title\n                videoUrl\n                thumbnail {\n                  title\n                  url\n                }\n              }\n              sys {\n                id\n              }\n            }\n          }\n          assets {\n            block {\n              sys {\n                id\n              }\n              title\n              url\n              width \n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery NewsContent($ids: [String!]) {\n  newsCollection(where: {sys: {id_in: $ids}}, limit: 4) {\n    items {\n      sys {\n        id\n      }\n      content {\n        json\n        links {\n          entries {\n            block {\n              __typename\n              ... on VideoEmbed {\n                title\n                videoUrl\n                thumbnail {\n                  title\n                  url\n                }\n              }\n              sys {\n                id\n              }\n            }\n          }\n          assets {\n            block {\n              sys {\n                id\n              }\n              title\n              url\n              width \n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery Aufgaben {\n  aufgabeCollection(limit: 100) {\n    items {\n      sys {\n        id\n      }\n      fraktion\n      title\n      empfaenger\n      releaseDate\n      ablaufdatum\n      punkte\n      thumbnail {\n        title\n        url\n      }\n      task {\n        __typename\n        ... on QuizTask {\n          fragenCollection(limit: 10) {\n            items {\n              frageTitle\n              frageText\n              sys {\n                id\n              }\n              antwortenCollection(limit: 5) {\n                items {\n                  title\n                  richtigeAntwort\n                  sys {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n        ... on GpsTask {\n          ortsbezeichnung\n          location {\n            lat\n            lon\n          }\n          ersatzAufgabe {\n            sys {\n              id\n            }\n            fraktion\n            title\n            empfaenger\n            releaseDate\n            ablaufdatum\n            punkte\n            thumbnail {\n              title\n              url\n            }\n            task {\n              __typename\n              ... on QuizTask {\n                fragenCollection(limit: 10) {\n                  items {\n                    frageTitle\n                    frageText\n                    sys {\n                      id\n                    }\n                    antwortenCollection(limit: 5) {\n                      items {\n                        title\n                        richtigeAntwort\n                        sys {\n                          id\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n              ... on GpsTask {\n                ortsbezeichnung\n                location {\n                  lat\n                  lon\n                }\n              }\n              ... on StepcounterTask {\n                schritte\n                ersatzAufgabe {\n                  __typename\n                  ... on Entry {\n                    sys {\n                      id\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        ... on StepcounterTask {\n          schritte\n          ersatzAufgabe {\n            sys {\n              id\n            }\n            fraktion\n            title\n            empfaenger\n            releaseDate\n            ablaufdatum\n            punkte\n            thumbnail {\n              title\n              url\n            }\n            task {\n              __typename\n              ... on QuizTask {\n                fragenCollection(limit: 10) {\n                  items {\n                    frageTitle\n                    frageText\n                    sys {\n                      id\n                    }\n                    antwortenCollection(limit: 5) {\n                      items {\n                        title\n                        richtigeAntwort\n                        sys {\n                          id\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n              ... on GpsTask {\n                ortsbezeichnung\n                location {\n                  lat\n                  lon\n                }\n              }\n              ... on StepcounterTask {\n                schritte\n                ersatzAufgabe {\n                  __typename\n                  ... on Entry {\n                    sys {\n                      id\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["\nquery Aufgaben {\n  aufgabeCollection(limit: 100) {\n    items {\n      sys {\n        id\n      }\n      fraktion\n      title\n      empfaenger\n      releaseDate\n      ablaufdatum\n      punkte\n      thumbnail {\n        title\n        url\n      }\n      task {\n        __typename\n        ... on QuizTask {\n          fragenCollection(limit: 10) {\n            items {\n              frageTitle\n              frageText\n              sys {\n                id\n              }\n              antwortenCollection(limit: 5) {\n                items {\n                  title\n                  richtigeAntwort\n                  sys {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n        ... on GpsTask {\n          ortsbezeichnung\n          location {\n            lat\n            lon\n          }\n          ersatzAufgabe {\n            sys {\n              id\n            }\n            fraktion\n            title\n            empfaenger\n            releaseDate\n            ablaufdatum\n            punkte\n            thumbnail {\n              title\n              url\n            }\n            task {\n              __typename\n              ... on QuizTask {\n                fragenCollection(limit: 10) {\n                  items {\n                    frageTitle\n                    frageText\n                    sys {\n                      id\n                    }\n                    antwortenCollection(limit: 5) {\n                      items {\n                        title\n                        richtigeAntwort\n                        sys {\n                          id\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n              ... on GpsTask {\n                ortsbezeichnung\n                location {\n                  lat\n                  lon\n                }\n              }\n              ... on StepcounterTask {\n                schritte\n                ersatzAufgabe {\n                  __typename\n                  ... on Entry {\n                    sys {\n                      id\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        ... on StepcounterTask {\n          schritte\n          ersatzAufgabe {\n            sys {\n              id\n            }\n            fraktion\n            title\n            empfaenger\n            releaseDate\n            ablaufdatum\n            punkte\n            thumbnail {\n              title\n              url\n            }\n            task {\n              __typename\n              ... on QuizTask {\n                fragenCollection(limit: 10) {\n                  items {\n                    frageTitle\n                    frageText\n                    sys {\n                      id\n                    }\n                    antwortenCollection(limit: 5) {\n                      items {\n                        title\n                        richtigeAntwort\n                        sys {\n                          id\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n              ... on GpsTask {\n                ortsbezeichnung\n                location {\n                  lat\n                  lon\n                }\n              }\n              ... on StepcounterTask {\n                schritte\n                ersatzAufgabe {\n                  __typename\n                  ... on Entry {\n                    sys {\n                      id\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery AufgabenContent($ids: [String!]) {\n  aufgabeCollection(where: {sys: {id_in: $ids}}, limit:4) {\n    items {\n      sys {\n        id\n      }\n      content {\n        json\n        links {\n          entries {\n            block {\n              __typename\n              ... on VideoEmbed {\n                title\n                videoUrl\n                thumbnail {\n                  title\n                  url\n                }\n              }\n              sys {\n                id\n              }\n            }\n          }\n          assets {\n            block {\n              sys {\n                id\n              }\n              title\n              url\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["\nquery AufgabenContent($ids: [String!]) {\n  aufgabeCollection(where: {sys: {id_in: $ids}}, limit:4) {\n    items {\n      sys {\n        id\n      }\n      content {\n        json\n        links {\n          entries {\n            block {\n              __typename\n              ... on VideoEmbed {\n                title\n                videoUrl\n                thumbnail {\n                  title\n                  url\n                }\n              }\n              sys {\n                id\n              }\n            }\n          }\n          assets {\n            block {\n              sys {\n                id\n              }\n              title\n              url\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery Global {\n  globalCollection(limit: 1) {\n    items {\n      mytopiaLogo {\n        title\n        url\n      }\n      hyaenenLogo {\n        title\n        url\n      }\n      zirkelLogo {\n        title\n        url\n      }\n      vertrauteLogo {\n        title\n        url\n      }\n      hyaenenSchwelle\n      zirkelSchwelle\n      vertrauteSchwelle\n      einbuergerungMytopiaText\n      einbuergerungMytopiaImage {\n        title\n        url\n      }\n      wechselZuHyaenenText\n      wechselZuHyaenenImage {\n        title\n        url\n      }\n      wechselZuZirkelText\n      wechselZuZirkelImage {\n        title\n        url\n      }\n      wechselZuVertrauteText\n      wechselZuVertrauteImage {\n        title\n        url\n      }\n      mytopiaInfosCollection(limit: 3) {\n        items {\n          title\n          sys {\n            id\n          }\n        }\n      }\n      hyaenenInfosCollection(limit: 3) {\n        items {\n          title\n          sys {\n            id\n          }\n        }\n      }\n      zirkelInfosCollection(limit: 3) {\n        items {\n          title\n          sys {\n            id\n          }\n        }\n      }\n      vertrauteInfosCollection(limit: 3) {\n        items {\n          title\n          sys {\n            id\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["\nquery Global {\n  globalCollection(limit: 1) {\n    items {\n      mytopiaLogo {\n        title\n        url\n      }\n      hyaenenLogo {\n        title\n        url\n      }\n      zirkelLogo {\n        title\n        url\n      }\n      vertrauteLogo {\n        title\n        url\n      }\n      hyaenenSchwelle\n      zirkelSchwelle\n      vertrauteSchwelle\n      einbuergerungMytopiaText\n      einbuergerungMytopiaImage {\n        title\n        url\n      }\n      wechselZuHyaenenText\n      wechselZuHyaenenImage {\n        title\n        url\n      }\n      wechselZuZirkelText\n      wechselZuZirkelImage {\n        title\n        url\n      }\n      wechselZuVertrauteText\n      wechselZuVertrauteImage {\n        title\n        url\n      }\n      mytopiaInfosCollection(limit: 3) {\n        items {\n          title\n          sys {\n            id\n          }\n        }\n      }\n      hyaenenInfosCollection(limit: 3) {\n        items {\n          title\n          sys {\n            id\n          }\n        }\n      }\n      zirkelInfosCollection(limit: 3) {\n        items {\n          title\n          sys {\n            id\n          }\n        }\n      }\n      vertrauteInfosCollection(limit: 3) {\n        items {\n          title\n          sys {\n            id\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetInfo($id: String!) {\n  info(id: $id) {\n    sys {\n      id\n    }\n    title\n    content {\n      json\n      links {\n        entries {\n          block {\n            __typename\n            ... on VideoEmbed {\n              title\n              videoUrl\n              thumbnail {\n                title\n                url\n              }\n            }\n            sys {\n              id\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            title\n            url\n            width\n            height\n          }\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery GetInfo($id: String!) {\n  info(id: $id) {\n    sys {\n      id\n    }\n    title\n    content {\n      json\n      links {\n        entries {\n          block {\n            __typename\n            ... on VideoEmbed {\n              title\n              videoUrl\n              thumbnail {\n                title\n                url\n              }\n            }\n            sys {\n              id\n            }\n          }\n        }\n        assets {\n          block {\n            sys {\n              id\n            }\n            title\n            url\n            width\n            height\n          }\n        }\n      }\n    }\n  }\n}\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;